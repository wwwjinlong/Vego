package jplat.service.ctl.test.encrypt;

import java.io.UnsupportedEncodingException;
import java.lang.reflect.Field;
import java.util.HashMap;
import java.util.Map;

import jplat.tools.coder.Base64Coder;
import jplat.tools.encrypt.AESTools;
import jplat.tools.encrypt.RSATools;
import jplat.tools.string.JRandomUtil;
import z.log.tracelog.JLog;

/**
 * 加密构造类.
 * @author zhangcq
 * @date May 8, 2017
 * @comment
 */
public class EncryptTestUtils
{
	public static void main( String args[] )
	{
//		RSATools.getInstance();
		
//		testAES();
		
		testRSA();
	}
	
	public static void testMap()
	{
		Map<String,String> map = new HashMap<String,String>();
		Field[] fds = map.getClass().getDeclaredFields();
		for ( int i = 0; i < fds.length; ++i )
		{
			JLog.log("%d:%s", i,fds[i].getName());
		}
	}
	
	public static void testAES()
	{

		String plainText = "headS:101111";
		String aesKey = "HrO96bda7XHNOKHx";
		
		String cipher = showAESCipher(plainText,aesKey);
		JLog.log("STAFF cihper:[%s]", cipher);
		
		String encData = "wgIcg7BspAg2MoXYjcmoicF838wGTzEvKDH5TpN0YS3NgfHMaCaJ5w40hZj7EsJig1d3VyM0QTpbn3YwCtrt2sV14iuvZjpGhOIiZZhBiLE/HBvxF1eVKNcffxJwnC4fc/je8xh80+/TozCPkmTzV+DDRgJCZdCOZkdKG6UCy9OgO2zyzwJSChkI9tp+snlvn/gOfj+Aa9x2Nl8RAamUWhYBRk8CTczLeMitZreICDtgPnCdIsSIFmqdvulq1U5o";
		doAESDecrypt(encData,aesKey);
	
	}
	
	public static void testRSA()
	{
		String reqMsg = getPlainBody("测试一下
		
		//生成aes密钥
//		String aesKey = JRandomUtil.getRandomSequence(16);
		String aesKey = "ur1nTk_l_mCFRNfP";
		
		JLog.log("-----------AESKey-plain=[ %s ]", aesKey);
		
		//加密aes密钥.
		String aes64Key = showRSACipher(aesKey);
		JLog.log("AESKey-RSA64:%s", aes64Key);
		
		//加密明文
		String cipher64 = showAESCipher(reqMsg,aesKey);
		
		//拼接密文.
		JLog.log("----------RSACipher:[%s#%s]", aes64Key,cipher64);
		
		/****************** 解密 ********************/
		//返回的base64密文.
		String base64String = "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";
		
		String rAesKey= "ur1nTk_l_mCFRNfP";
		doAESDecrypt(base64String,rAesKey);
	}
	
	private static String showAESCipher( String plainText, String aesKey )
	{
		try
		{
			String base64Data = Base64Coder.toBase64String(AESTools.encrypt(plainText.getBytes("utf-8"), aesKey));
			
			JLog.log("AES64Data:%s", base64Data);
			
			return base64Data;
		} catch (UnsupportedEncodingException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		} catch (Exception e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		
		return "";
	}
	
	private static String getPlainBody( String plainText )
	{
		return String.format("{\"head\":{},\"body\":{\"text\":\"%s\",\"note\":\"this is encrypt test.\"}}", plainText);
	}
	
	private static void doAESDecrypt( String encdata, String keyStr )
	{
		try {
			
			byte[] encBytes = Base64Coder.fromBase64String(encdata);
			byte[] plainData = AESTools.decrypt(encBytes, keyStr);
			
			JLog.log("AES-PLAIN:%s", new String(plainData,"utf-8"));
		} catch (Exception e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
	}
	
	private static String showRSACipher( String plainText )
	{
		try
		{
			byte[] encData = RSATools.getInstance().encryptData(plainText.getBytes("utf-8"));
			String base64Data = Base64Coder.toBase64String(encData);
			return base64Data;
		} catch (UnsupportedEncodingException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		} catch (Exception e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		
		return "";
	}
	
	private static String doRSAdecrypt( String base64Data )
	{
		byte[] encData = Base64Coder.fromBase64String(base64Data);
		
		try {
			String plainText = RSATools.getInstance().dencryptData(encData,"utf-8");
			
			JLog.log("RSA_plainText:%s", plainText);
		} catch (Exception e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		
		return "";
	}
	
}
